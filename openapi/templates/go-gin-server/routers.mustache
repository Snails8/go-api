{{>partial_header}}
package {{packageName}}

import (
	"net/http"

	"go-api/middleware"

	"github.com/gin-contrib/cors"
	"github.com/gin-gonic/gin"
	"github.com/jackc/pgx/v4/pgxpool"
)

// Route is the information for every URI.
type Route struct {
	// Name is the name of this Route.
	Name        string
	// Method is the string for the HTTP method. ex) GET, POST etc..
	Method      string
	// Pattern is the pattern of the URI.
	Pattern     string
	// HandlerFunc is the handler function of this route.
	HandlerFunc func(psxpool *pgxpool.Pool, logger *middleware.Logger) gin.HandlerFunc
}

// Routes is the list of the generated Route.
type Routes []Route

// NewRouter returns a new router.
func NewRouter(pgxpool *pgxpool.Pool, logger *middleware.Logger) *gin.Engine {
	router := gin.Default()

	config := cors.DefaultConfig()
    config.AllowOrigins = []string{"http://localhost:3000"}
    router.Use(cors.New(config))

	for _, route := range routes {
		switch route.Method {
		case http.MethodGet:
			router.GET(route.Pattern, route.HandlerFunc(pgxpool, logger))
		case http.MethodPost:
			router.POST(route.Pattern, route.HandlerFunc(pgxpool, logger))
		case http.MethodPut:
			router.PUT(route.Pattern, route.HandlerFunc(pgxpool, logger))
		case http.MethodPatch:
			router.PATCH(route.Pattern, route.HandlerFunc(pgxpool, logger))
		case http.MethodDelete:
			router.DELETE(route.Pattern, route.HandlerFunc(pgxpool, logger))
		}
	}

	return router
}

var routes = Routes{

	{{#apiInfo}}{{#apis}}{{#operations}}{{#operation}}{
		"{{operationId}}",
		http.Method{{httpMethod}},
		"{{{basePathWithoutHost}}}{{{path}}}",
		{{operationId}},
	},{{/operation}}{{/operations}}{{/apis}}{{/apiInfo}}
}